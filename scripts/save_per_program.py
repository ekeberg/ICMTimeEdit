"""Save the personal dataframes generated by parse_excel.py to one Excel file"""
from collections import defaultdict
import pickle
import numpy
import pandas
import staffing.staffing as staffing

INPUT_FILE = "data/personal_frames.pkl"
OUTPUT_FILE = "results/Bemanning2023.xlsx"


class ExcelWriter:
    """A class used for writing personal dataframes to a larger excel file"""
    def __init__(self, file_name) -> None:
        self.writer = pandas.ExcelWriter(file_name, engine='openpyxl')
        self.startrow = defaultdict(int)

    def __enter__(self):
        return self

    def __exit__(self, exc_type, exc_value, traceback):
        self.writer.close()

    def save(self):
        """Save the excel file"""
        self.writer.close()

    def write_person_frame_to_excel(self, person, frame):
        """Write the personal frame to the excel file"""
        program = person.program
        # Write name and employment
        pandas.DataFrame([person.name, person.employment]).T.to_excel(
            self.writer, sheet_name=program,
            startrow=self.startrow[program],
            index=False, header=False)
        self.startrow[program] += 1

        # Write the dataframe
        frame.to_excel(self.writer, sheet_name=program,
                       startrow=self.startrow[program],
                       index=True, header=True)
        self.startrow[program] += len(frame) + 2



def main():
    """Do the thing"""
    with open(INPUT_FILE, "rb") as file:
        personal_frames = pickle.load(file)

    programs = list(numpy.unique([p.program for p in personal_frames.keys()]))

    with ExcelWriter(OUTPUT_FILE) as writer:
        for program in programs:
            people_in_program = [p for p in personal_frames.keys()
                                 if p.program == program]

            for person in people_in_program:
                frame = personal_frames[person]
                if frame is not None:
                    writer.write_person_frame_to_excel(person, frame)

    staffing.make_columns_larger(OUTPUT_FILE)

if __name__ == "__main__":
    main()
